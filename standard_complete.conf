# This is a complete default configuration file.
# It serves files from the web root you created (on the `root` key).
# It will only respond to requests to the `server_name` or `ip_address` provided.
# Any files ending in .html will be processed before each server sends the results to the client (browser).
# relative path always starts from each server's $root_directory
# ./ means $path_to_web_server_executable/
# a directory or file with no path (i.e.: test_index.html) will be searched on ./

# Timeout for keep-alive connections. ServerData will close connections after this time.
#keepalive_timeout              3000;# TODO NEEDED? OR WE CHOOSE ON CODE

# The default server is the first one listed in the nginx.conf file, unless you include the default_server parameter
# to the listen directive to explicitly designate a server as the default. tofo keep it?

server {
    # server_name = name that can substitute the ip_address on the browser search bar
    # not mandatory | default: localhost
    # syntax: server_name string -> string does not contain regexp (regular expressions) or wildcards
    server_name                 ;
    # listens_to = listening port number for this port (it identifies a particular application or service on a system)
    # port 591, 8008 and 8080 are registered as an alternative port for HTTP service (8080 being more used).
    # not mandatory | default 80
    # syntax: listens_to u_short -> u_short between 49152 and 65536 (exceptions: 80, 591, 8008 and 8080).
    listens_to                  8008;
    # ip_address = the Internet Protocol address linked to this port (it identifies a machine in an IP network and is
    # used to determine the destination of a data packet)
    # not mandatory | default: 127.0.0.1
    # syntax: ip_address X.X.X.X
    ip_address                  255.255.255.255;
    # root_directory = root folder of site directory (full or relative path)
    # not mandatory | default: ./$server_name (for the sake of this project's organization)
    # syntax: root_directory dir_name_string -> string does not contain regexp (regular expressions) or wildcards
    root_directory              ./;
    # index_file = file name to be processed when a directory/location uri is requested
    # it will look for this file name on the $root_directory of the server or the specific location/directory
    # ex1: http://localhost -> it will look for index.html at this server's $root_directory
    # ex2: http://localhost/dir1/dir2 -> it will look for index.html at the $root_directory of this specific uri location
    # not mandatory | default: index.html
    # syntax: root_directory file_string -> string does not contain regexp (regular expressions) or wildcards
    index_file                  test_index.html;
    # client_max_body_size = max size (in bytes) for the request's body
    # not mandatory | default: 1024 (1KB) -> Max: INT_MAX (2GB)
    # syntax: client_max_body_size unsig_int_nbr
    client_max_body_size        2048;
    # error_page = specifies a path to be used to determine a file to be displayed (full or relative path)
    # the status code to se send on the response will be specified as the name of the file
    # not mandatory | default: $root_directory/error_pages/$status_code.html
    # syntax: error_page file_string -> string does not contain regexp (regular expressions) or wildcards
    error_page                  my_error_pages/500.html;
    # port_redirection = port that will be used to redirect the requested url to
    # not mandatory
    # syntax: port_redirection u_short -> u_short between 49152 and 65536 (exceptions: 80, 591, 8008 and 8080).
    port_redirection            8080;
    #TODO: we can use on the code: 301 response status for the response and redirect it to http://$server_name:$port_redirection$request_uri;

    # location = specifies a set of configuration depending on a request URI
    # The path after the locaiton key is the $uri_path (The path on the URL after $host), and so, this path (location/
    # directory) needs to be made available to be requested/accessed by the client (browser)
    # not mandatory | When no uri directory is requested (ex: http://localhost):
    #                     - The server's default $root_directory and $index_file will be used
    #                 When an uri is requested (ex: http://localhost/security/passwords) but no location block is given:
    #                     - The response will contain a 404 status code and a $404.html error page since the location
    #                       does no exist or can not be accesses (rights/security/etc)
    location dir1/dir2 {
        # root_directory = specifies the root directory of this location (full or relative path)
        # not mandatory | default: $root_directory
        root_directory          random_dir;
        # allow_methods = allowed methods for this location/directory
        # not mandatory | default: GET
        allow_methods           DELETE POST;
        # index_file = file name to be processed for this location/directory
        # not mandatory | default: the server's default $index_file
        index_file              test_index.html;
        # auto_index = | turns on/off directory listing for this location
        # not mandatory | default: off
        auto_index              on;
    }

    # not mandatory | default: python cgi with a default index.htmp inside
   location cgi {
        # root_directory = specifies the root directory of the cgi interpreter (full or relative path)
        # mandatory
       root_directory          cgi;
        # interpreter_path = location of the cgi interpreter installed on the current system (full path)
        # mandatory
       interpreter_path        /usr/bin/python3;
        # script_extension = extensions for executable file(s)
        # mandatory
       script_extension        .py;
        # index_file = file name to be processed when the cgi is requested (i.e.: after the script is executed)
        # not mandatory | default: stays in the same page
       index_file              cgi_index.html;
   }
}