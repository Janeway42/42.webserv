# This is a complete default configuration file.
# It serves files from the web root you created (on the `root` key).
# It will only respond to requests to the `server_name` or `ip_address` provided.
# Any files ending in .html will be processed before each server sends the results to the client (browser).
# relative path always starts from each server's $root_directory
# ./ means $path_to_web_server_executable/
# a directory or file with no path (i.e.: test_index.html) will be searched on ./

# Timeout for keep-alive connections. ServerData will close connections after this time.
#keepalive_timeout              3000;# TODO NEEDED? OR WE CHOOSE ON CODE

# The default server is the first one listed in the nginx.conf file, unless you include the default_server parameter
# to the listen directive to explicitly designate a server as the default. tofo keep it?

server {
    # server_name = name(s) (i.e. domain(s)) that can substitute the ip address on the browser search bar (from just 1 IP address)
    ### not mandatory | default: localhost -> If a new one is added here, also need to be added into /etc/hosts
    # syntax: server_name <string> -> doesn't contain regexp (regular expressions) or wildcards
    server_name                 localhost;
    # listens_to = listening port number for this port (it identifies a particular application or service on a system)
    # port 591, 8008 and 8080 are registered as an alternative port for HTTP service (8080 being more used).
    ### not mandatory | default 80
    # syntax: listens_to <u_short> -> u_short between 49152 and 65536 (exceptions: 80, 591, 8008 and 8080).
    listens_to                  8080;
    # ip_address = the Internet Protocol address linked to this port (it identifies a machine in an IP network and is
    # used to determine the destination of a data packet)
    ### not mandatory | default: 127.0.0.1
    # syntax: ip_address <X.X.X.X>
    # todo delete ip_address and have it inside the server_name?
    ip_address                  ;
    # root_directory = root folder of site directory (full or relative path). It cannot be the same directory as the
    # web server (i.e. it cannot be only ./ or . or any path that leads to the webserver directory)
    ### not mandatory | default: ./$server_name (for the sake of this project's organization)
    # syntax: root_directory <dir> -> doesn't contain regexp (regular expressions) or wildcards
    root_directory              resources;
    # index_file = file name to be processed as homepage or when a directory/location url is requested it will look
    # for this file name on the $root_directory of the server or the specific location/directory and its subdirectories
    # ex1: http://localhost -> it will look for index.html at this server's $root_directory
    # ex2: http://localhost/dir1/dir2 -> it will look for index.html at the $root_directory of this specific uri location
    # not mandatory | default: index.html
    # syntax: index_file <file_name_string> -> doesn't contain regexp (regular expressions), wildcards or full/relative path
    index_file                  ;
	# client_max_body_size = max size (in bytes) for the request's body
	### not mandatory | default: 1024 (1KB) -> Max: INT_MAX (i.e. 2GB)
	# syntax: client_max_body_size <unsig_int_nbr>
	client_max_body_size        2048;
	# error_page = specifies http status error file(s) to be displayed. Separated by spaces if more than one is added
	# The status code to be sent on the response will be specified as the name of the file
	### not mandatory | default: webserver will decide
	# syntax: error_page <file_string> -> doesn't contain regexp (regular expressions), wildcards or full/relative path
	error_page                  400.html 401.html 403.html 500.html;
	# port_redirection = port that will be used to redirect the requested url to
	### not mandatory | default: no redirection
	# syntax: port_redirection <u_short> -> u_short between 49152 and 65536 (exceptions: 80, 591, 8008 and 8080)
	port_redirection            80088;
	# todo: it has to be PORT redirection OR redireciton to another path on the server? or both? (ps. status 301 is used anyways I think).
	#TODO: we can use on the code: 301 response status for the response and redirect it to http://$server_name:$port_redirection$request_uri;

    # location = specifies a set of configuration for a specific path directory (this path is located on the URL
    # after http://host::port/) and has to match exatcly the uri directory path
    # This path needs to be made available to be requested/accessed by the client (browser) and to make it available,
    # it has to be added after the location keyword on this config file
    # I.e. Be sure that every file and folder found under a domain is a match for one or more location directives.
    ### not mandatory | When an url is requested (ex: http://localhost/users/form/form.html):
    #                     - The uri path has to be added to this file, after this location keyword
    #                       E.g.: location users/form
    #                       This location $root_directory and $index_file will be used
    #                   When an url is requested (ex: http://localhost/tests) but no uri is given:
    #                     - The response will contain a 404 status code and a $404.html error page since the location
    #                       (i.e. the path) does no exist or can not be accessed
    #                   When no url directory is requested (ex: http://localhost):
    #                     - The server's default $root_directory and $index_file will be used
    # Obs.: the location block is not mandatory but if a location block is inserted, then a <uri_path> is mandatory
    # syntax: location <uri_path> -> doesn't contain regexp (regular expressions) or wildcards
    
    
    location server_root {
    # location bla {
        # root_directory = specifies the root directory of this location (full or relative path)
        ### not mandatory | default: $server.$root_directory
        # syntax: root_directory <dir_name_string> -> doesn't contain regexp (regular expressions) or wildcards
        root_directory          ./resources/location_random_dir;
        # allow_methods = allowed methods for this location/directory
        ### not mandatory | default: GET (available: GET POST DELETE)
        # syntax: allow_methods <METHOD1 METHOD2> -> methods upercase and separated by spaces
        allow_methods           POST DELETE;
        # index_file = file name to be processed for this location/directory
        ### not mandatory | default: index.html
        # syntax: index_file <file_name_string> -> doesn't contain regexp (regular expressions), wildcards or full/relative path
        index_file              index_test.html;
        # auto_index = | turns on/off directory listing for this location
        ### not mandatory | default: off (avaibable: on off)
        # syntax: auto_index <state>
        auto_index              on;
        #todo add redirection here?
    }

    # location = specifies a set of configuration for the CGI, and which extension to use on the interpreter.
    ### not mandatory | default: .cgi
    # syntax: location <extension> -> doesn't contain regexp (regular expressions), wildcards or full/relative path
    location .py {
        # root_directory = specifies the root directory of the cgi interpreter (full or relative path)
        ### mandatory
        # syntax: root_directory <dir_name_string> -> doesn't contain regexp (regular expressions) or wildcards
        root_directory          cgi;
        # interpreter_path = location of the cgi interpreter installed on the current system (full path)
        ### mandatory
        # syntax: interpreter_path <path_string> -> doesn't contain regexp (regular expressions) or wildcards
        interpreter_path        /usr/bin/python3;
        # script_extension = extensions for executable file(s)
        ### mandatory | available: .py .php
        # syntax: script_extension <extention> -> doesn't contain regexp (regular expressions) or wildcards
        script_extension        .py;
        # index_file = file name to be processed when the cgi is requested
        # (p.s.: To be processed after the script is executed)
        ### not mandatory | default: stays in the same html page
        # syntax: index_file <file_name_string> -> doesn't contain regexp (regular expressions), wildcards or full/relative path
        index_file              cgi_index.html;
    }


}

# server {
#     listens_to                  49158;
# }
